from flask import Blueprint, request, jsonify, send_file
from flask_jwt_extended import jwt_required, get_jwt_identity
from datetime import datetime, timedelta
import os
import tempfile
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.lineplots import LinePlot
from reportlab.graphics.charts.linecharts import HorizontalLineChart
import matplotlib.pyplot as plt
import io
import base64

from models.database import ThreatAssessment, AnalysisSession, MLResult, User, mongo
from services.threat_service import ThreatAssessmentService
from utils.logger import log_system_event

reports_bp = Blueprint('reports', __name__)

@reports_bp.route('/generate', methods=['POST'])
@jwt_required()
def generate_report():
    """Generate comprehensive PDF report."""
    try:
        user_id = get_jwt_identity()
        data = request.get_json()
        
        report_type = data.get('type', 'comprehensive')  # comprehensive, threat_summary, analysis_session
        session_id = data.get('session_id')
        days = data.get('days', 7)
        
        # Generate report based on type
        if report_type == 'analysis_session' and session_id:
            pdf_path = generate_session_report(session_id, user_id)
        elif report_type == 'threat_summary':
            pdf_path = generate_threat_summary_report(days, user_id)
        else:
            pdf_path = generate_comprehensive_report(days, user_id)
        
        if not pdf_path or not os.path.exists(pdf_path):
            return jsonify({'message': 'Failed to generate report'}), 500
        
        log_system_event('INFO', f'Report generated: {report_type}', 'reports', user_id)
        
        return send_file(
            pdf_path,
            as_attachment=True,
            download_name=f'radiological_report_{datetime.utcnow().strftime("%Y%m%d_%H%M%S")}.pdf',
            mimetype='application/pdf'
        )
        
    except Exception as e:
        log_system_event('ERROR', f'Report generation error: {str(e)}', 'reports')
        return jsonify({'message': 'Failed to generate report'}), 500

def generate_comprehensive_report(days, user_id):
    """Generate comprehensive system report."""
    # Create temporary file
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    temp_path = temp_file.name
    temp_file.close()
    
    # Create PDF document
    doc = SimpleDocTemplate(temp_path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        textColor=colors.darkblue
    )
    story.append(Paragraph("Quantum ML Radiological Threat Detection Report", title_style))
    story.append(Spacer(1, 20))
    
    # Report metadata
    user = User.query.get(user_id)
    report_info = [
        ['Generated By:', user.username if user else 'Unknown'],
        ['Report Date:', datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')],
        ['Report Period:', f'Last {days} days'],
        ['Report Type:', 'Comprehensive System Report']
    ]
    
    info_table = Table(report_info, colWidths=[2*inch, 3*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
    ]))
    story.append(info_table)
    story.append(Spacer(1, 30))
    
    # Executive Summary
    story.append(Paragraph("Executive Summary", styles['Heading2']))
    
    cutoff_date = datetime.utcnow() - timedelta(days=days)
    
    # Get statistics
    total_assessments = ThreatAssessment.query.filter(
        ThreatAssessment.assessment_time >= cutoff_date
    ).count()
    
    high_threats = ThreatAssessment.query.filter(
        ThreatAssessment.assessment_time >= cutoff_date,
        ThreatAssessment.threat_level == 'danger'
    ).count()
    
    medium_threats = ThreatAssessment.query.filter(
        ThreatAssessment.assessment_time >= cutoff_date,
        ThreatAssessment.threat_level == 'warning'
    ).count()
    
    summary_text = f"""
    During the {days}-day reporting period, the Quantum ML Radiological Threat Detection System 
    processed {total_assessments} threat assessments. Of these, {high_threats} were classified as 
    high-threat situations requiring immediate response, and {medium_threats} required elevated 
    monitoring. The system maintained operational status throughout the reporting period.
    """
    
    story.append(Paragraph(summary_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Threat Statistics
    story.append(Paragraph("Threat Assessment Statistics", styles['Heading2']))
    
    threat_stats = [
        ['Metric', 'Count', 'Percentage'],
        ['Total Assessments', str(total_assessments), '100%'],
        ['High Threats (Danger)', str(high_threats), f'{(high_threats/total_assessments*100):.1f}%' if total_assessments > 0 else '0%'],
        ['Medium Threats (Warning)', str(medium_threats), f'{(medium_threats/total_assessments*100):.1f}%' if total_assessments > 0 else '0%'],
        ['Low Threats (Clear)', str(total_assessments - high_threats - medium_threats), f'{((total_assessments - high_threats - medium_threats)/total_assessments*100):.1f}%' if total_assessments > 0 else '0%']
    ]
    
    stats_table = Table(threat_stats, colWidths=[2.5*inch, 1*inch, 1.5*inch])
    stats_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(stats_table)
    story.append(Spacer(1, 30))
    
    # Recent High-Priority Incidents
    story.append(Paragraph("Recent High-Priority Incidents", styles['Heading2']))
    
    recent_incidents = ThreatAssessment.query.filter(
        ThreatAssessment.assessment_time >= cutoff_date,
        ThreatAssessment.threat_level == 'danger'
    ).order_by(ThreatAssessment.assessment_time.desc()).limit(5).all()
    
    if recent_incidents:
        incident_data = [['Date/Time', 'Isotope', 'Threat Probability', 'Response Level']]
        for incident in recent_incidents:
            incident_data.append([
                incident.assessment_time.strftime('%Y-%m-%d %H:%M'),
                incident.consensus_isotope or 'Unknown',
                f'{incident.overall_threat_probability:.1%}',
                str(incident.emergency_response_level)
            ])
        
        incident_table = Table(incident_data, colWidths=[1.5*inch, 1.5*inch, 1.5*inch, 1*inch])
        incident_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.red),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightpink),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(incident_table)
    else:
        story.append(Paragraph("No high-priority incidents recorded during this period.", styles['Normal']))
    
    story.append(Spacer(1, 30))
    
    # System Recommendations
    story.append(Paragraph("System Recommendations", styles['Heading2']))
    
    recommendations = []
    if high_threats > 0:
        recommendations.append("• Review and update emergency response procedures based on recent high-threat incidents")
        recommendations.append("• Consider additional training for response personnel")
    
    if total_assessments == 0:
        recommendations.append("• Verify system operational status and data collection processes")
    
    recommendations.append("• Continue regular system maintenance and calibration")
    recommendations.append("• Monitor system performance metrics and update ML models as needed")
    
    for rec in recommendations:
        story.append(Paragraph(rec, styles['Normal']))
    
    # Build PDF
    doc.build(story)
    return temp_path

def generate_session_report(session_id, user_id):
    """Generate report for specific analysis session."""
    session = AnalysisSession.query.get(session_id)
    if not session or session.user_id != user_id:
        return None
    
    # Create temporary file
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    temp_path = temp_file.name
    temp_file.close()
    
    # Create PDF document
    doc = SimpleDocTemplate(temp_path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=30,
        textColor=colors.darkblue
    )
    story.append(Paragraph(f"Analysis Session Report: {session.session_name}", title_style))
    story.append(Spacer(1, 20))
    
    # Session Information
    session_info = [
        ['Session ID:', session.id],
        ['Session Name:', session.session_name or 'N/A'],
        ['Start Time:', session.start_time.strftime('%Y-%m-%d %H:%M:%S UTC') if session.start_time else 'N/A'],
        ['End Time:', session.end_time.strftime('%Y-%m-%d %H:%M:%S UTC') if session.end_time else 'N/A'],
        ['Status:', session.status],
        ['Analysis Type:', session.analysis_type or 'N/A']
    ]
    
    info_table = Table(session_info, colWidths=[2*inch, 3*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
    ]))
    story.append(info_table)
    story.append(Spacer(1, 30))
    
    # ML Results
    ml_results = MLResult.query.filter_by(analysis_session_id=session_id).all()
    
    if ml_results:
        story.append(Paragraph("ML Analysis Results", styles['Heading2']))
        
        for result in ml_results:
            story.append(Paragraph(f"{result.model_type.title()} Model Results", styles['Heading3']))
            
            result_data = [
                ['Metric', 'Value'],
                ['Threat Probability', f'{result.threat_probability:.1%}'],
                ['Classified Isotope', result.classified_isotope or 'Unknown'],
                ['Confidence Level', result.confidence_level or 'N/A'],
                ['Material Quantity', result.material_quantity or 'N/A'],
                ['Processing Time', f'{result.processing_time:.2f}s' if result.processing_time else 'N/A']
            ]
            
            result_table = Table(result_data, colWidths=[2*inch, 2*inch])
            result_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(result_table)
            story.append(Spacer(1, 20))
    
    # Threat Assessment
    threat_assessment = ThreatAssessment.query.filter_by(analysis_session_id=session_id).first()
    
    if threat_assessment:
        story.append(Paragraph("Threat Assessment", styles['Heading2']))
        
        threat_service = ThreatAssessmentService()
        summary = threat_service.generate_threat_summary(threat_assessment.to_dict())
        recommendations = threat_service.get_response_recommendations(threat_assessment.to_dict())
        
        story.append(Paragraph(f"Summary: {summary}", styles['Normal']))
        story.append(Spacer(1, 10))
        
        story.append(Paragraph("Recommendations:", styles['Heading3']))
        for rec in recommendations:
            story.append(Paragraph(f"• {rec}", styles['Normal']))
    
    # Build PDF
    doc.build(story)
    return temp_path

def generate_threat_summary_report(days, user_id):
    """Generate threat summary report."""
    # Create temporary file
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    temp_path = temp_file.name
    temp_file.close()
    
    # Create PDF document
    doc = SimpleDocTemplate(temp_path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=30,
        textColor=colors.darkred
    )
    story.append(Paragraph(f"Threat Summary Report - Last {days} Days", title_style))
    story.append(Spacer(1, 20))
    
    cutoff_date = datetime.utcnow() - timedelta(days=days)
    
    # Get all threats in period
    threats = ThreatAssessment.query.filter(
        ThreatAssessment.assessment_time >= cutoff_date
    ).order_by(ThreatAssessment.assessment_time.desc()).all()
    
    if not threats:
        story.append(Paragraph("No threat assessments found for the specified period.", styles['Normal']))
    else:
        # Summary statistics
        high_threats = [t for t in threats if t.threat_level == 'danger']
        medium_threats = [t for t in threats if t.threat_level == 'warning']
        
        story.append(Paragraph(f"Total Assessments: {len(threats)}", styles['Normal']))
        story.append(Paragraph(f"High Threats: {len(high_threats)}", styles['Normal']))
        story.append(Paragraph(f"Medium Threats: {len(medium_threats)}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Detailed threat list
        if high_threats:
            story.append(Paragraph("High-Priority Threats", styles['Heading2']))
            
            for threat in high_threats[:10]:  # Limit to top 10
                threat_info = f"""
                Date: {threat.assessment_time.strftime('%Y-%m-%d %H:%M:%S')}
                Isotope: {threat.consensus_isotope or 'Unknown'}
                Probability: {threat.overall_threat_probability:.1%}
                Contamination Radius: {threat.contamination_radius:.1f}m
                """
                story.append(Paragraph(threat_info, styles['Normal']))
                story.append(Spacer(1, 10))
    
    # Build PDF
    doc.build(story)
    return temp_path

@reports_bp.route('/templates', methods=['GET'])
@jwt_required()
def get_report_templates():
    """Get available report templates."""
    templates = [
        {
            'id': 'comprehensive',
            'name': 'Comprehensive System Report',
            'description': 'Complete system overview with statistics and recommendations',
            'parameters': ['days']
        },
        {
            'id': 'threat_summary',
            'name': 'Threat Summary Report',
            'description': 'Summary of threat assessments and incidents',
            'parameters': ['days']
        },
        {
            'id': 'analysis_session',
            'name': 'Analysis Session Report',
            'description': 'Detailed report for specific analysis session',
            'parameters': ['session_id']
        }
    ]
    
    return jsonify({'templates': templates}), 200
